generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String         @id @unique @default(cuid())
  name                   String?
  username               String         @unique
  email                  String         @unique
  emailVerified          Boolean        @default(false)
  password               String
  avatarUrl              String?
  phoneNumber            String?
  createdAt              DateTime       @default(now())
  role                   UserRole       @default(USER)
  businessName           String?
  isActive               Boolean        @default(true)
  sendEmailNotifications Boolean        @default(true)
  sendInAppNotifications Boolean        @default(true)
  verificationCode       String?
  twoFactorEnabled       Boolean        @default(false)
  twoFactorSecret        String?
  primaryWalletId        String?
  metadata               Json?
  ActivityLog            ActivityLog[]
  Session                Session[]
  subscriptions          Subscription[]
  transactions           Transaction[]
  wallets                Wallet[]
}

model Transaction {
  id             String        @id @unique @default(cuid())
  userId         String
  subscriptionId String?
  amount         Float
  currency       String
  status         String
  type           String
  createdAt      DateTime      @default(now())
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
}

model Wallet {
  id        String   @id @unique @default(cuid())
  userId    String
  address   String   @unique
  type      String
  balance   Float    @default(0.0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id        String   @id @unique @default(cuid())
  userId    String
  action    String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Company {
  id            String         @id @unique @default(cuid())
  name          String
  currency      String         @default("USD")
  acceptedCoins String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  plans         Plan[]
  subscriptions Subscription[]
}

model Plan {
  id            String         @id @unique @default(cuid())
  companyId     String
  name          String
  price         Float
  billingCycles String[]
  isTiered      Boolean        @default(false)
  tierGroupId   String?
  position      Int?
  features      Json?
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
}

model Subscription {
  id           String        @id @unique @default(cuid())
  userId       String
  companyId    String
  planId       String
  billingCycle String
  coinType     String
  coinAmount   Float
  startDate    DateTime
  renewalDate  DateTime
  status       String
  tierGroupId  String?
  createdAt    DateTime      @default(now())
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  plan         Plan          @relation(fields: [planId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

enum UserRole {
  USER
  BUSINESS
  ADMIN
}
