generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String         @id @unique @default(cuid())
  name                   String?
  username               String         @unique
  email                  String         @unique
  emailVerified          Boolean        @default(false)
  password               String
  avatarUrl              String?
  phoneNumber            String?
  createdAt              DateTime       @default(now())
  role                   UserRole       @default(USER)
  isActive               Boolean        @default(true)
  sendEmailNotifications Boolean        @default(true)
  sendInAppNotifications Boolean        @default(true)
  verificationCode       String?
  twoFactorEnabled       Boolean        @default(false)
  twoFactorSecret        String?
  metadata               Json?
  ActivityLog            ActivityLog[]
  Session                Session[]
  subscriptions          Subscription[]
  transactions           Transaction[]
  wallets                Wallet[]
  Company                Company[]
}

model Wallet {
  id            String         @id @unique @default(cuid())
  address       String         @unique
  blockchain    String
  balance       Float          @default(0.0)
  provider      String
  providerImage String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tokenBalances TokenBalance[]
  activities    WalletActivity[]

  @@unique([address, provider, blockchain]) // Ensure provider and address are unique together
  @@index([address])
}

model WalletActivity {
  id        String   @id @unique @default(cuid())
  walletId  String
  userId    String
  lastUsed  DateTime @default(now())
  wallet    Wallet   @relation(fields: [walletId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  metadata  Json?    // Store additional context about wallet usage

  @@index([walletId])
  @@index([userId])
}

model TokenBalance {
  id        String @id @default(cuid())
  walletId  String
  tokenName String // Token name/symbol (e.g., "USDC")
  balance   Float // Token balance (e.g., 100.0)
  symbol    String
  wallet    Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([walletId, tokenName])
}

model ActivityLog {
  id        String   @id @unique @default(cuid())
  userId    String
  action    String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Company {
  id                String         @id @unique @default(cuid())
  name              String // Editable Business Name
  category          String
  currency          String         @default("USD") // Default Fiat Currency
  acceptedCoins     String[] // Accepted Cryptocurrencies (e.g., BTC, ETH)
  restrictedRegions String[]       @default([]) // Restricted Sales Regions
  withdrawalWallet  String? // Default Wallet Address for Withdrawals
  primaryWalletId   String?        @unique
  enableTax         Boolean        @default(true) // Tax toggle switch
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  slug              String         @unique
  ownerId           String
  owner             User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  plans             Plan[]
  subscriptions     Subscription[]
  Wallet            Wallet[]
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Transaction {
  id             String        @id @unique @default(cuid())
  userId         String
  subscriptionId String?
  total         Float
  currency       String
  type           String
  createdAt      DateTime      @default(now())
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  status        TransactionStatus @default(PENDING)
  items         Json              // Array of {symbol: string, amount: number}
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  user          User              @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Plan {
  id            String         @id @unique @default(cuid())
  companyId     String
  name          String
  description   String?
  acceptedCoins String[]
  billingCycles BillingCycle[]
  slug          String
  features      Json?
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  status        PlanStatus     @default(PRIVATE)
}

model BillingCycle {
  id       String   @id @default(cuid())
  planId   String
  cycle    Cycle
  price    Float
  plan     Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([planId, cycle])
}

model Subscription {
  id           String             @id @unique @default(cuid())
  userId       String?
  companyId    String?
  planId       String
  billingCycle String
  coinType     String[]
  startDate    DateTime
  renewalDate  DateTime
  status       SubscriptionStatus @default(ACTIVE)
  createdAt    DateTime           @default(now())

  // Relations
  company      Company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  plan         Plan          @relation(fields: [planId], references: [id], onDelete: Cascade)
  user         User?         @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

enum UserRole {
  USER
  BUSINESS
  ADMIN
}

enum Cycle {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE // The subscription is active and renewing as expected.
  PENDING // The subscription is being processed or awaiting confirmation.
  CANCELED // The subscription has been canceled and will not renew.
  EXPIRED // Optional: The subscription has ended due to non-renewal or expiration.
  PAUSED // Optional: The subscription is temporarily paused but not canceled.
}

enum PlanStatus {
  ACTIVE    // Plan is published and visible to users
  PRIVATE   // Plan is created but hidden from public view
  ARCHIVED  // Plan is no longer in use but kept for record
  DISABLED  // Plan is temporarily disabled
}
