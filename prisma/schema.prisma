generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String         @id @unique @default(cuid())
  name                   String?
  username               String         @unique
  email                  String         @unique
  emailVerified          Boolean        @default(false)
  password               String
  avatarUrl              String?
  phoneNumber            String?
  createdAt              DateTime       @default(now())
  role                   UserRole       @default(USER)
  isActive               Boolean        @default(true)
  sendEmailNotifications Boolean        @default(true)
  sendInAppNotifications Boolean        @default(true)
  verificationCode       String?
  twoFactorEnabled       Boolean        @default(false)
  twoFactorSecret        String?
  primaryWalletId        String?        @unique
  metadata               Json?
  ActivityLog            ActivityLog[]
  Session                Session[]
  subscriptions          Subscription[]
  transactions           Transaction[]
  wallets                Wallet[]
  Company                Company[]
}

model Wallet {
  id        String   @id @unique @default(cuid())
  address   String   @unique // Wallet address
  balance   Float    @default(0.0)
  userId    String? // Links to a user
  companyId String? // Links to a company
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id]) // User's wallet
  Company   Company? @relation(fields: [companyId], references: [id]) // Company's wallet
}

model ActivityLog {
  id        String   @id @unique @default(cuid())
  userId    String
  action    String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Company {
  id              String         @id @unique @default(cuid())
  name            String         // Editable Business Name
  currency        String         @default("USD") // Default Fiat Currency
  acceptedCoins   String[]       // Accepted Cryptocurrencies (e.g., BTC, ETH)
  restrictedRegions String[]     @default([]) // Restricted Sales Regions
  withdrawalWallet String?       // Default Wallet Address for Withdrawals
  primaryWalletId String?        @unique
  enableTax       Boolean        @default(true) // Tax toggle switch
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  ownerId         String
  owner           User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  plans           Plan[]
  subscriptions   Subscription[]
  Wallet          Wallet[]
}


model Transaction {
  id             String        @id @unique @default(cuid())
  userId         String
  subscriptionId String?
  amount         Float
  currency       String
  status         String
  type           String
  createdAt      DateTime      @default(now())
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  user           User          @relation(fields: [userId], references: [id])

  // New Tax Fields
  taxRate        Float?        // Applied tax rate
  taxAmount      Float?        // Tax amount calculated
  jurisdiction   String?       // Jurisdiction for tax tracking
  netAmount      Float?        // Net amount after tax deductions
}


model Plan {
  id            String         @id @unique @default(cuid())
  companyId     String
  name          String
  price         Float
  billingCycles String[]
  isTiered      Boolean        @default(false)
  tierGroupId   String?
  position      Int?
  features      Json?
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
  TierGroup     TierGroup?     @relation(fields: [tierGroupId], references: [id])
}

model TierGroup {
  id       String @id @unique @default(cuid())
  name     String
  features Json
  plans    Plan[]
}

model Subscription {
  id           String        @id @unique @default(cuid())
  name         String        // Add a name field for display purposes
  userId       String
  companyId    String
  planId       String
  billingCycle String
  coinType     String
  coinAmount   Float
  startDate    DateTime
  renewalDate  DateTime
  status       String
  tierGroupId  String?
  createdAt    DateTime      @default(now())

  // Relations
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  plan         Plan          @relation(fields: [planId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}


enum UserRole {
  USER
  BUSINESS
  ADMIN
}
