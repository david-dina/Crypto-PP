generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String           @id @unique @default(cuid())
  name                   String?
  username               String           @unique
  email                  String           @unique
  emailVerified          Boolean          @default(false)
  password               String
  avatarUrl              String?
  phoneNumber            String?
  createdAt              DateTime         @default(now())
  role                   UserRole         @default(USER)
  isActive               Boolean          @default(true)
  sendEmailNotifications Boolean          @default(true)
  sendInAppNotifications Boolean          @default(true)
  verificationCode       String?
  twoFactorEnabled       Boolean          @default(false)
  twoFactorSecret        String?
  metadata               Json?
  ActivityLog            ActivityLog[]
  Company                Company[]
  Session                Session[]
  subscriptions          Subscription[]
  transactions           Transaction[]
  Wallet                 Wallet[]
  WalletActivity         WalletActivity[]
}

model Wallet {
  id            String           @id @unique @default(cuid())
  address       String
  blockchain    String
  balance       Float            @default(0.0)
  provider      String
  userId        String?
  companyId     String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  providerImage String?
  tokenBalances TokenBalance[]
  Company       Company?         @relation(fields: [companyId], references: [id])
  User          User?            @relation(fields: [userId], references: [id])
  activities    WalletActivity[]

  @@unique([address, provider, blockchain])
  @@index([address])
}

model WalletActivity {
  id       String   @id @unique @default(cuid())
  walletId String
  userId   String
  lastUsed DateTime @default(now())
  metadata Json?
  user     User     @relation(fields: [userId], references: [id])
  wallet   Wallet   @relation(fields: [walletId], references: [id])

  @@index([userId])
  @@index([walletId])
}

model TokenBalance {
  id        String @id @default(cuid())
  walletId  String
  tokenName String
  balance   Float
  symbol    String
  wallet    Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([walletId, tokenName])
}

model ActivityLog {
  id        String   @id @unique @default(cuid())
  userId    String
  action    String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Company {
  id                String         @id @unique @default(cuid())
  name              String
  category          String
  currency          String         @default("USD")
  acceptedCoins     String[]
  restrictedRegions String[]       @default([])
  withdrawalWallet  String?
  primaryWalletId   String?        @unique
  enableTax         Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  ownerId           String
  slug              String         @unique
  owner             User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  plans             Plan[]
  subscriptions     Subscription[]
  Wallet            Wallet[]
}

model Transaction {
  id             String            @id @unique @default(cuid())
  userId         String
  subscriptionId String?
  currency       String
  type           String
  createdAt      DateTime          @default(now())
  items          Json
  total          Float
  updatedAt      DateTime          @updatedAt
  status         TransactionStatus @default(PENDING)
  subscription   Subscription?     @relation(fields: [subscriptionId], references: [id])
  user           User              @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Plan {
  id            String         @id @unique @default(cuid())
  companyId     String
  name          String
  features      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  acceptedCoins String[]
  description   String?
  status        PlanStatus     @default(PRIVATE)
  slug          String
  billingCycles BillingCycle[]
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
}

model BillingCycle {
  id     String @id @default(cuid())
  planId String
  cycle  Cycle
  price  Float
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([planId, cycle])
}

model Subscription {
  id           String             @id @unique @default(cuid())
  userId       String?
  companyId    String?
  planId       String
  billingCycle String
  startDate    DateTime
  renewalDate  DateTime
  createdAt    DateTime           @default(now())
  coinType     String[]
  status       SubscriptionStatus @default(ACTIVE)
  company      Company?           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  plan         Plan               @relation(fields: [planId], references: [id], onDelete: Cascade)
  user         User?              @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum UserRole {
  USER
  BUSINESS
  ADMIN
}

enum Cycle {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  PENDING
  CANCELED
  EXPIRED
  PAUSED
}

enum PlanStatus {
  ACTIVE
  PRIVATE
  ARCHIVED
  DISABLED
}
